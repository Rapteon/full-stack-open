import React from 'react';
import ReactDOM from 'react-dom';

const Header = ({ course }) => {
  return (
    <h1>{course.name}</h1>
  )
}

const Total = ({ course }) => {
  /**
   * Using the following return statement,
   * instead of something like
   * return prevPart.exercises + currPart.exercises
   * because after the first call, the returned object
   * will be used for the second call. Since the first
   * call returns a number object, calling <somenumber>.exercises
   * returns a NaN, and any further results generated by the reduce
   * will also be NaN.
   */
  const partSummation = (prevPart, currPart) => {
    return {exercises: prevPart.exercises + currPart.exercises}
  }
  /**
   * {exercises: 0} object is required to get provide the value for
   * prevPart when called the first time.
   */
  const summationHolder = course.parts.reduce(partSummation, {exercises: 0})
  return(
    <p><b>total of {summationHolder.exercises} exercises</b></p>
  ) 
}

const Part = (props) => {
  return (
    <p>
      {props.part.name} {props.part.exercises}
    </p>    
  )
}

const Content = ({ course }) => {
  return (
    <div>
      {course.parts.map(part =>
        <Part key={part.id} part={part}/>
      )}
    </div>
  )
}

const Course = ({course}) => {
  return (
    <div>
      <Header course={course}/>
      <Content course={course}/>
      <Total course={course}/>
    </div>
  )
}

const App = () => {
  const courses = [
    {
      name: 'Half Stack application development',
      id: 1,
      parts: [
        {
          name: 'Fundamentals of React',
          exercises: 10,
          id: 1
        },
        {
          name: 'Using props to pass data',
          exercises: 7,
          id: 2
        },
        {
          name: 'State of a component',
          exercises: 14,
          id: 3
        },
        {
          name: 'Redux',
          exercises: 11,
          id: 4
        }
      ]
    }, 
    {
      name: 'Node.js',
      id: 2,
      parts: [
        {
          name: 'Routing',
          exercises: 3,
          id: 1
        },
        {
          name: 'Middlewares',
          exercises: 7,
          id: 2
        }
      ]
    }
  ]

  return courses.map(course => {
    return <Course course={course} />
  })
}

ReactDOM.render(<App />, document.getElementById('root'))